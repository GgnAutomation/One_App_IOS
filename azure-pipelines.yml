# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
trigger:
  branches:
    exclude:
    - DEV
    - UAT

schedules:
- cron: '30 23 * * *'
  displayName: Daily build
  branches:
    include:
    - main
  always: true

pool:
  vmImage: ubuntu-latest

variables:
  isMainStageSuccessful: 'false'

stages:
- stage: BuildAndTest
  jobs:
  - job: MavenBuild
    steps:
    - task: Maven@3
      timeoutInMinutes: 150
      continueOnError: true  # Allows the pipeline to continue even if this task fails
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' 
        testResultsFiles: '**/surefire-reports/TEST-*.xml'

    - bash: |
        echo "Listing contents of surefire-reports directory:"
        ls -l $(System.DefaultWorkingDirectory)/surefire-reports
      displayName: 'List Test Results'


    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/surefire-reports/**'  # Make sure this matches the output directory structure of the Maven task
        TargetFolder: '$(Build.ArtifactStagingDirectory)/surefire-reports'


    - task: ArchiveFiles@2
      displayName: 'Archive test results'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/surefire-reports'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/test-results.zip'
        replaceExistingArchive: true


    - task: PublishBuildArtifacts@1
      condition: always()  # Ensures this step runs even if previous steps fail
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/test-results.zip'
        ArtifactName: 'test-results'
        publishLocation: 'Container'

    - bash: |
        echo "##vso[task.setvariable variable=isMainStageSuccessful]true"
      condition: succeeded()
